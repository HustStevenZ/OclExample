//
// Created by Sanqian on 16/8/30.
//

#include "matrixmul.hpp"

std::string mulKernel="\n"
        "#define AS(i, j) As[j + i * BLOCK_SIZE]\n"
        "#define BS(i, j) Bs[j + i * BLOCK_SIZE]\n"
        "\n"
        "///////////////////////////////////////////////////////////////////////////////\n"
        "//! Matrix multiplication on the device: C = A * B\n"
        "//! uiWA is A's width and uiWB is B's width\n"
        "////////////////////////////////////////////////////////////////////////////////\n"
        "__kernel void\n"
        "matrixMul( __global float* C, __global float* A, __global float* B,\n"
        "\t   __local float* As, __local float* Bs, int uiWA, int uiWB, int trueLocalSize1)\n"
        "{\n"
        "    // Block index\n"
        "    int bx = get_group_id(0);\n"
        "    int by = get_group_id(1);\n"
        "\n"
        "    // Thread index\n"
        "    int tx = get_local_id(0);\n"
        "    int ty = get_local_id(1);\n"
        "\n"
        "    // Index of the first sub-matrix of A processed by the block\n"
        "    int aBegin = uiWA * BLOCK_SIZE * by;\n"
        "\n"
        "    // Index of the last sub-matrix of A processed by the block\n"
        "    int aEnd   = aBegin + uiWA - 1;\n"
        "\n"
        "    // Step size used to iterate through the sub-matrices of A\n"
        "    int aStep  = BLOCK_SIZE;\n"
        "\n"
        "    // Index of the first sub-matrix of B processed by the block\n"
        "    int bBegin = BLOCK_SIZE * bx;\n"
        "\n"
        "    // Step size used to iterate through the sub-matrices of B\n"
        "    int bStep  = BLOCK_SIZE * uiWB;\n"
        "\n"
        "    // Csub is used to store the element of the block sub-matrix\n"
        "    // that is computed by the thread\n"
        "    float Csub = 0.0f;\n"
        "\n"
        "    // Loop over all the sub-matrices of A and B\n"
        "    // required to compute the block sub-matrix\n"
        "    for (int a = aBegin, b = bBegin;\n"
        "             a <= aEnd;\n"
        "             a += aStep, b += bStep) {\n"
        "\n"
        "        // Load the matrices from device memory\n"
        "        // to shared memory; each thread loads\n"
        "        // one element of each matrix\n"
        "        AS(ty, tx) = A[a + uiWA * ty + tx];\n"
        "        BS(ty, tx) = B[b + uiWB * ty + tx];\n"
        "\n"
        "        // Synchronize to make sure the matrices are loaded\n"
        "        barrier(CLK_LOCAL_MEM_FENCE);\n"
        "\n"
        "        // Multiply the two matrices together;\n"
        "        // each thread computes one element\n"
        "        // of the block sub-matrix\n"
        "        #pragma unroll\n"
        "        for (int k = 0; k < BLOCK_SIZE; ++k)\n"
        "            Csub += AS(ty, k) * BS(k, tx);\n"
        "\n"
        "        // Synchronize to make sure that the preceding\n"
        "        // computation is done before loading two new\n"
        "        // sub-matrices of A and B in the next iteration\n"
        "        barrier(CLK_LOCAL_MEM_FENCE);\n"
        "    }\n"
        "\n"
        "    if (get_global_id(1) < trueLocalSize1)\n"
        "    // Write the block sub-matrix to device memory;\n"
        "    // each thread writes one element\n"
        "    C[get_global_id(1) * get_global_size(0) + get_global_id(0)] = Csub;\n"
        "\n"
        "}";



